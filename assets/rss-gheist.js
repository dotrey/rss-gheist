!function(){"use strict";class t{static addEventListener(e,i){void 0===t.listeners[e]&&(this.listeners[e]=[]),this.listeners[e].indexOf(i)<0&&this.listeners[e].push(i)}static raiseEvent(t,e){if(void 0!==this.listeners[t]){let i=[];for(const s of this.listeners[t])try{!1===s(e)&&i.push(s)}catch(e){console.log("Error in event listener for "+t,e)}for(const e of i)this.removeEventListener(t,e)}}static removeEventListener(t,e){if(void 0!==this.listeners[t]){let i=this.listeners[t].indexOf(e);i>-1&&this.listeners[t].splice(i,1)}}static resetListeners(t){this.listeners[t]=[]}}t.listeners={};class e{constructor(t){this.url=t}}function i(t,e,i,s){const r=document.createElement(t||"div");if("string"==typeof(e=null!=e?e:[])&&(e=e?[e]:[]),e.length&&r.classList.add(...e),"string"==typeof(i=null!=i?i:""))s?r.innerHTML=i:r.innerText=i;else for(const t of i)r.appendChild(t);return r}class s{constructor(t,e){this.parent=t,this.app=e,this.create()}create(){}}class r extends s{create(){this.container=i("div","settings"),this.container.tabIndex=0,this.container.appendChild(this.createAddNew()),this.container.appendChild(this.createCorsProxy()),this.parent.appendChild(this.container)}createAddNew(){let t=i("div","setting",[i("div","setting-name","Add RSS Feed")]),e=i("div","first-element-fill-h"),s=i("input");s.type="text",s.placeholder="RSS Feed URL",s.autocomplete="off",e.appendChild(s);let r=i("button");r.innerText="add feed",e.appendChild(r);let n=i("form");return n.addEventListener("submit",(t=>{t.preventDefault(),this.app.addSubscription(s.value),n.reset()})),n.appendChild(e),t.appendChild(n),t}createCorsProxy(){let t=i("div","setting",[i("div","setting-name","CORS Proxy")]),e=i("div","first-element-fill-h"),s=i("input");s.type="text",s.placeholder="CORS Proxy URL",s.autocomplete="off",s.value=this.app.getCorsProxy(),e.appendChild(s);let r=i("button");r.innerText="update",e.appendChild(r);let n=i("form");return n.addEventListener("submit",(t=>{t.preventDefault(),this.app.setCorsProxy(s.value),s.value=this.app.getCorsProxy()})),n.appendChild(e),t.appendChild(n),t}}class n extends s{create(){this.container=i("div","subscription-details"),this.createGreeting(),this.parent.appendChild(this.container),this.app.addEventListener("subscription-selected",(t=>{var e;null===(e=this.container)||void 0===e||e.classList.remove("center-items"),(!this.selectedSubscription||this.selectedSubscription&&this.selectedSubscription.url!==t.url)&&(this.selectedSubscription=this.app.getSubscription(t.url),this.selectedSubscription&&!this.selectedSubscription.channel&&this.app.refreshSubscription(this.selectedSubscription.url),this.refresh())})),this.app.addEventListener("subscription-refreshed",(t=>{this.selectedSubscription&&this.selectedSubscription.url===t.url&&this.refresh()})),this.app.addEventListener("subscription-content-updated",(t=>{this.selectedSubscription&&this.selectedSubscription.url===t.url&&this.refresh()}))}refresh(){if(this.selectedSubscription&&this.selectedSubscription.channel&&this.container){this.container.innerHTML="";for(const t of this.selectedSubscription.channel.items){let e=i("div","channel-item",[i("div","channel-item-date",t.pubDate?t.pubDate.toLocaleString():""),i("div","channel-item-link",t.link?`<a href="${t.link}" target="_blank">open in new tab</a>`:"",!0),i("div","channel-item-title",t.title),i("div","channel-item-body",t.description)]);this.container.appendChild(e)}}}createGreeting(){this.container&&this.container.appendChild(i("div","greeting",[i("h1","","rss gheist"),i("h2","","simple, free, client-side"),i("p","","I created rss gheist because I needed a simple RSS reader with notifications. All offers I found required me to sign up, so I took a weekend to create this simple, client-side RSS reader. No registration needed, <s>no configuration needed</s>...",!0),i("h2","","but... CORS"),i("p","",'The initial test immediately showed a critical flaw of this client-side only design: <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" target="_blank">CORS</a>.',!0),i("p","","Now don't get me wrong here, CORS is something good, but since it prevents JS from getting data from an RSS feed (unless the feed has an <code>Access-Control-Allow-Origin: *</code> HTTP header specified), it basically killed the idea of client-side only.",!0),i("p","","But, there always is a way, and in this case it is a <b>CORS proxy</b>. There are many out there, and you can even create your own with the <code>corsproxy.php</code> file from rss gheist's repository. The proxy runs on a server, fetches the data from the RSS feed and adds the <code>Access-Control-Allow-Origin: *</code> HTTP header we need for the client-side script to retrieve the data.",!0),i("p","","Search for a proxy you like or create your own, then add the proxy's URL in the settings field in a format where only the feed's URL needs to be appended. For example, if you use the <code>corsproxy.php</code> on <code>yourserver.com</code>, you would enter <code>https://yourserver.com/corsproxy.php?url=</code>. Now rss gheist is ready to fetch the feed's data!",!0)]))}}class o extends s{constructor(t,e,i){super(t,e),this.parent=t,this.app=e,this.subscription=i,this.create()}create(){var t;if(!this.subscription)return;this.container=i("div","subscription"),this.container.addEventListener("click",(()=>{this.app.selectSubscription(this.subscription.url)})),this.container.dataset.url=this.subscription.url;let e=i("div","title",this.subscription.name||this.subscription.url);this.container.appendChild(e),this.container.appendChild(i("div","url",this.subscription.url));let s=i("div","date-content","content: ");this.subscription.channel&&this.subscription.channel.items.length>0?s.innerText+=(null===(t=this.subscription.channel.items[0].pubDate)||void 0===t?void 0:t.toLocaleString())||"":s.innerHTML+="&minus;",this.container.appendChild(s);let r=i("div","date-refresh","refresh: ");if(this.subscription.lastRefresh>0){let t=new Date;t.setTime(this.subscription.lastRefresh),r.innerText+=t.toLocaleString()||""}else r.innerHTML+="&minus;";this.container.appendChild(r);let n=i("label","autorefresh","auto refresh"),o=i("input","");o.type="checkbox",o.checked=this.subscription.refreshInterval>0,n.appendChild(o),n.addEventListener("click",(t=>{t.stopPropagation()})),o.addEventListener("change",(t=>{console.log(o.checked?"true":"false"),this.app.setSubscriptionAutoRefresh(this.subscription.url,o.checked)})),this.container.appendChild(n);let a=i("label","notification","notification"),c=i("input","");c.type="checkbox",c.checked=this.subscription.notificationEnabled,a.appendChild(c),a.addEventListener("click",(t=>{t.stopPropagation()})),c.addEventListener("change",(t=>{console.log(c.checked?"true":"false"),this.app.setSubscriptionNotifications(this.subscription.url,c.checked)})),this.container.appendChild(a);let h=i("div","delete","&#x2715;",!0);h.addEventListener("click",(t=>{var e;t.preventDefault(),t.stopPropagation(),this.app.removeSubscription(this.subscription.url)&&(null===(e=this.container)||void 0===e||e.remove())})),this.container.appendChild(h),this.app.addEventListener("subscription-refreshed",(t=>{var i;if(t.url===this.subscription.url){if(e.innerText=this.subscription.name,c.checked=this.subscription.notificationEnabled,o.checked=this.subscription.refreshInterval>0,r.innerText="refresh:",this.subscription.lastRefresh>0){let t=new Date;t.setTime(this.subscription.lastRefresh),r.innerText+=" "+t.toLocaleString()||""}else r.innerHTML+=" &minus;";s.innerText="content:",this.subscription.channel&&this.subscription.channel.items.length>0?s.innerText+=" "+(null===(i=this.subscription.channel.items[0].pubDate)||void 0===i?void 0:i.toLocaleString())||"":s.innerHTML+=" &minus;"}})),this.app.addEventListener("subscription-selected",(t=>{var e,i;this.subscription.url===t.url?null===(e=this.container)||void 0===e||e.classList.add("selected"):null===(i=this.container)||void 0===i||i.classList.remove("selected")})),this.parent.appendChild(this.container)}}class a extends s{create(){this.container=i("div","subscription-list"),this.parent.appendChild(this.container);for(const t of this.app.listSubscriptions())new o(this.container,this.app,t);this.app.addEventListener("subscription-added",(t=>{let e=this.app.getSubscription(t.url);e&&new o(this.container,this.app,e)})),this.app.addEventListener("subscription-removed",(t=>{var e;null===(e=this.container.querySelector(`subscription[data-url="${t.url}"]`))||void 0===e||e.remove()}))}}class c extends s{create(){this.container=i("main"),this.subscriptionList=new a(this.container,this.app),this.subscriptionDetails=new n(this.container,this.app),this.settings=new r(this.container,this.app),this.parent.appendChild(this.container)}}class h{constructor(){this.hasPermission=!1,this.notifications=[],this.maxNotificationCount=3,this.checkPermission()}showNotification(t,e){if(this.hasPermission){const i=new Notification(t,e);for(i.addEventListener("close",(()=>{let t=this.notifications.indexOf(i);t>=0&&this.notifications.splice(t,1)})),this.notifications.push(i);this.notifications.length>this.maxNotificationCount;){let t=this.notifications.shift();null==t||t.close()}}return this.hasPermission}requestPermission(){if(this.hasPermission)return;const t=()=>{this.checkPermission()};this.checkNotificationPromise()?Notification.requestPermission().then(t):Notification.requestPermission(t)}checkPermission(){if(!window||!("Notification"in window))return this.hasPermission=!1,void console.log("no notification support");this.hasPermission="granted"===Notification.permission}checkNotificationPromise(){try{Notification.requestPermission().then()}catch(t){return!1}return!0}}class l{clear(){try{localStorage.clear()}catch(t){this.logError(t)}}getItem(t){try{return localStorage.getItem(t)}catch(t){this.logError(t)}return""}removeItem(t){try{localStorage.removeItem(t)}catch(t){this.logError(t)}}setItem(t,e){try{localStorage.setItem(t,e)}catch(t){this.logError(t)}}logError(t){console.log("access to local storage failed",t)}}function u(t,e,i,s){return new(i||(i=Promise))((function(r,n){function o(t){try{c(s.next(t))}catch(t){n(t)}}function a(t){try{c(s.throw(t))}catch(t){n(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,a)}c((s=s.apply(t,e||[])).next())}))}class d{constructor(t,e){this.url=t,this.item=e}}class p{constructor(){this.title="",this.link="",this.description="",this.pubDate=null,this.lastBuildDate=null,this.items=[]}lastestGuid(){return this.items.length>0?this.items[0].guid:""}}class f{constructor(){this.title="",this.description="",this.author="",this.link="",this.guid="",this.pubDate=null,this.categories=[]}}class b{parse(t){return u(this,void 0,void 0,(function*(){const e=(new DOMParser).parseFromString(t,"text/xml"),i=e.querySelector("parseerror");if(i)throw console.log(i),new Error("RSS parse error");return this.createChannel(e)}))}createChannel(t){const e=new p,i=t.querySelector("channel");if(i){const t=i.querySelector("title");t&&t.parentNode===i&&(e.title=t.textContent||"");const s=i.querySelector("link");s&&s.parentNode===i&&(e.link=s.textContent||"");const r=i.querySelector("description");r&&r.parentNode===i&&(e.description=r.textContent||"");const n=i.querySelector("lastBuildDate");n&&n.parentNode===i&&(e.lastBuildDate=this.parseDate(n.textContent));const o=i.querySelector("pubDate");o&&o.parentNode===i&&(e.pubDate=this.parseDate(o.textContent)),i.querySelectorAll("item").forEach((t=>{t.parentNode===i&&e.items.push(this.createItem(t))}))}else e.title="NO RSS CHANNEL";return e}createItem(t){const e=new f,i=t.querySelector("title");i&&(e.title=i.textContent||"");const s=t.querySelector("description");s&&(e.description=s.textContent||"");const r=t.querySelector("author");r&&(e.author=r.textContent||"");const n=t.querySelector("link");n&&(e.link=n.textContent||"");const o=t.querySelector("guid");o&&(e.guid=o.textContent||"");const a=t.querySelector("pubDate");return a&&(e.pubDate=this.parseDate(a.textContent)),t.querySelectorAll("category").forEach((t=>{e.categories.push(t.textContent||"")})),e}parseDate(t){if(!t)return null;const e=Date.parse(t);if(isNaN(e)||e<0)return null;const i=new Date;return i.setTime(e),i}}class v{constructor(){this.url="",this.name="",this.lastestGuid="",this.notificationEnabled=!1,this.refreshInterval=0,this.refreshTimeout=0,this.lastRefresh=0,this.channel=null}serialize(){return JSON.stringify(this,["url","name","lastestGuid","notificationEnabled","refreshInterval","lastRefresh"])}static fromString(t){let e=JSON.parse(t),i=new v;return i.url=e.url||"",i.name=e.name||"",i.lastestGuid=e.lastestGuid||"",i.notificationEnabled=!!e.notificationEnabled,i.refreshInterval=e.refreshInterval||0,i.lastRefresh=e.lastRefresh||0,i}}class m{constructor(e){this.storage=e,this.defaultRefreshInterval=300,this.rssParser=new b,this.subscriptions={},this.subscriptionStorageKey="subscriptions",this.proxyStorageKey="corsproxy",this.proxy="",this.proxy=this.storage.getItem(this.proxyStorageKey)||"",this.load(),t.addEventListener("subscription-selected",(t=>{let e=this.get(t.url);e&&0===e.refreshInterval&&e.lastRefresh+1e3*this.defaultRefreshInterval<Date.now()&&this.refresh(t.url)}))}add(i){if(void 0!==this.subscriptions[i])return void console.log(`can not add subscription for ${i} -> already exists`);let s=new v;s.url=i,this.subscriptions[i]=s,t.raiseEvent("subscription-added",new e(i)),this.refresh(i).finally((()=>{this.save()}))}get(t){return this.subscriptions[t]}list(){return Object.values(this.subscriptions)}remove(i){void 0!==this.subscriptions[i]&&(delete this.subscriptions[i],this.save(),t.raiseEvent("subscription-removed",new e(i)))}setNotification(i,s){void 0!==this.subscriptions[i]&&(this.subscriptions[i].notificationEnabled=s,this.save(),t.raiseEvent("subscription-refreshed",new e(i)))}setAutoRefresh(i,s){void 0!==this.subscriptions[i]&&(this.subscriptions[i].refreshInterval=s?this.defaultRefreshInterval:0,this.save(),t.raiseEvent("subscription-refreshed",new e(i)),this.setRefreshTimeout(this.subscriptions[i]))}refresh(i){return u(this,void 0,void 0,(function*(){const s=this.subscriptions[i];if(void 0===s)return;let r=s.url;this.proxy&&(r=this.proxy+encodeURIComponent(s.url));const n=yield fetch(r,{method:"GET"});if(n.ok){const i=yield n.text();s.channel=yield this.rssParser.parse(i),s.channel&&s.name!==s.channel.title&&(s.name=s.channel.title),s.lastRefresh=Date.now(),this.save(),t.raiseEvent("subscription-refreshed",new e(s.url)),this.checkUpdated(s)}else console.log(`failed to fetch RSS feed ${s.url} -> ${n.status} ${n.statusText}`);this.setRefreshTimeout(s)}))}setRefreshTimeout(t){t.refreshInterval>0&&t.refreshTimeout<1&&(t.refreshTimeout=window.setTimeout((()=>{t.refreshTimeout=0,this.refresh(t.url)}),1e3*t.refreshInterval))}setCorsProxy(t){this.storage.setItem(this.proxyStorageKey,t),this.proxy=t}getCorsProxy(){return this.proxy}checkUpdated(i){if(!i.channel)return;const s=i.channel.lastestGuid();i.lastestGuid!==s&&(t.raiseEvent("subscription-content-updated",new e(i.url)),i.notificationEnabled&&i.channel.items.length>0&&t.raiseEvent("subscription-notification",new d(i.url,i.channel.items[0]))),i.lastestGuid=s}save(){let t=Object.values(this.subscriptions).map((t=>t.serialize()));this.storage.setItem(this.subscriptionStorageKey,JSON.stringify(t))}load(){this.subscriptions={};let t=this.storage.getItem(this.subscriptionStorageKey)||"[]";try{let e=JSON.parse(t);for(const t of e)try{let e=v.fromString(t);this.subscriptions[e.url]=e,this.setRefreshTimeout(this.subscriptions[e.url])}catch(t){}}catch(t){}}}const S=new class{constructor(){this.notifications=new h,this.storage=new l,this.subscriptions=new m(this.storage)}initialize(){t.addEventListener("subscription-notification",this.showSubscriptionNotification.bind(this))}addSubscription(t){this.subscriptions.add(t)}getSubscription(t){return this.subscriptions.get(t)}removeSubscription(t){this.subscriptions.remove(t)}listSubscriptions(){return this.subscriptions.list()}refreshSubscription(t){this.subscriptions.refresh(t)}setSubscriptionNotificiations(t,e){e&&this.notifications.requestPermission(),this.subscriptions.setNotification(t,e)}setSubscriptionAutoRefresh(t,e){this.subscriptions.setAutoRefresh(t,e)}setCorsProxy(t){this.subscriptions.setCorsProxy(t)}getCorsProxy(){return this.subscriptions.getCorsProxy()}addEventListener(e,i){t.addEventListener(e,i)}removeEventListener(e,i){t.removeEventListener(e,i)}showSubscriptionNotification(t){let e={body:t.item.description,vibrate:[200,100,200]};this.notifications.showNotification(t.item.title,e)}},g=new class{constructor(t){this.rss=t,t.initialize(),new c(document.body,this)}listSubscriptions(){return this.rss.listSubscriptions()}getSubscription(t){return this.rss.getSubscription(t)}addSubscription(t){this.rss.addSubscription(t)}removeSubscription(t){return!!confirm(`Remove RSS feed '${t}'?`)&&(this.rss.removeSubscription(t),!0)}refreshSubscription(t){this.rss.refreshSubscription(t)}selectSubscription(i){t.raiseEvent("subscription-selected",new e(i))}setSubscriptionNotifications(t,e){this.rss.setSubscriptionNotificiations(t,e)}setSubscriptionAutoRefresh(t,e){this.rss.setSubscriptionAutoRefresh(t,e)}setCorsProxy(t){this.rss.setCorsProxy(t)}getCorsProxy(){return this.rss.getCorsProxy()}addEventListener(t,e){this.rss.addEventListener(t,e)}}(S);window.rssg=S,window.rss=g}();
//# sourceMappingURL=rss-gheist.js.map
